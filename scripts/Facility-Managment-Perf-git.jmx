<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Facility Managment" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BaseURL" elementType="Argument">
            <stringProp name="Argument.name">BaseURL</stringProp>
            <stringProp name="Argument.value">stg-rcpconsole.rmb-lab.jp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BGT_VERSION" elementType="Argument">
            <stringProp name="Argument.name">BGT_VERSION</stringProp>
            <stringProp name="Argument.value">2.1.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FM-Version" elementType="Argument">
            <stringProp name="Argument.name">FM-Version</stringProp>
            <stringProp name="Argument.value">2.9.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CURRENT_D&amp;T" elementType="Argument">
            <stringProp name="Argument.name">CURRENT_D&amp;T</stringProp>
            <stringProp name="Argument.value">${__time(ddHHmmssSSS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">9999</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">FacilityID</stringProp>
        <stringProp name="CounterConfig.format">0001</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FM_API&apos;s" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(Loopcount,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(Threads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(Rampup,1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="RCP_LOGIN" enabled="true"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
            <stringProp name="delimiter">|</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">C:/JMeter_Tool-Old/username.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">username,password</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RCP_Staging_Login -R" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">sym_perf_qa1@rakuten.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Pass##1234</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">rcp</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">password</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/Rakuten-OSS-Stg/protocol/openid-connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">RCP_TOCKEN</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.*?)&quot;,&quot;expires_in</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Reftoken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">${__setProperty(RefreshToken_${__threadNum}, ${Reftoken})};</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T-FACILITIES_API&apos;S-AddonAPI&apos;S" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${RCP_TOCKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">audience</stringProp>
                <stringProp name="Header.value">apim</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Facility Listing" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility data" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/search?_s=id%3Dge%3D0&amp;orderBy=id&amp;orderType=desc&amp;llimit=0&amp;ulimit=24</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">FacilityName</stringProp>
                <stringProp name="RegexExtractor.regex">null,&quot;name&quot;:&quot;(.*?)&quot;,&quot;status</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/searchRecordsCount?_s=id%3Dge%3D0&amp;$llimit&amp;$ulimit</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Facility Filter By name" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility search" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/search?_s=name%3D%3D%27*${FacilityName}*%27&amp;orderBy=id&amp;orderType=desc&amp;llimit=0&amp;ulimit=24</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility searchRecordsCount" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/searchRecordsCount?_s=name%3D%3D%27*Facilityautomation*%27&amp;$llimit&amp;$ulimit</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="TC-Create Facility Details" enabled="true">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Facility Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;facility&quot;:{&quot;referenceId&quot;:&quot;TestR${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;name&quot;:&quot;TestFacilityIDName&quot;,&quot;siteNameLocalized&quot;:&quot;small&quot;,&quot;subType&quot;:&quot;small&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;entityType&quot;:{&quot;id&quot;:1087,&quot;type&quot;:&quot;RDC&quot;},&quot;status&quot;:&quot;In Design&quot;,&quot;address&quot;:&quot; Fuji-Hakone-Izu National Park&quot;,&quot;latitude&quot;:35.3606,&quot;longitude&quot;:138.7274,&quot;buildingName&quot;:&quot;innoeye&quot;,&quot;entityGeographyL1&quot;:{&quot;id&quot;:48,&quot;name&quot;:&quot;TOKAI&quot;},&quot;entityGeographyL2&quot;:{&quot;id&quot;:2143,&quot;name&quot;:&quot;SHIZUOKA&quot;,&quot;geographyL1&quot;:{&quot;name&quot;:&quot;TOKAI&quot;}},&quot;entityGeographyL3&quot;:{&quot;id&quot;:172,&quot;name&quot;:&quot;FUJINOMIYA-SHI&quot;},&quot;phase&quot;:&quot;Phase 1&quot;,&quot;provider&quot;:&quot;pxuzuzyinl&quot;,&quot;locationId&quot;:&quot;L3673&quot;,&quot;superBlockNumber&quot;:&quot;3&quot;,&quot;sarfId&quot;:&quot;Default&quot;,&quot;siteCategory&quot;:&quot;Default&quot;,&quot;classification&quot;:&quot;Facility&quot;,&quot;siteCode&quot;:&quot;R${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;fiveGAantennaType&quot;:&quot;NA&quot;,&quot;searchRadiusRing&quot;:0,&quot;clutterType&quot;:&quot;DU&quot;,&quot;siteNumber&quot;:null},&quot;identifierList&quot;:[],&quot;facilityBuildingList&quot;:[{&quot;name&quot;:&quot;Building Name&quot;,&quot;selected&quot;:true}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FacilityIntegration/createFacilityDetail</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1523852302">&quot;status&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">TestFacilityID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Building Identifier" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FacilityBuilding/search?_s=referenceId==%27${TestFacilityID}%27;siteType%3D%3D%27RDC%27&amp;orderBy=modifiedTime&amp;orderType=desc&amp;llimit=0&amp;ulimit=100</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identifier Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="name Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">name</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Floor" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;Floor${FacilityID}&quot;,&quot;number&quot;:1,&quot;siteRefId&quot;:&quot;${TestFacilityID}&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;buildingIdentifier&quot;:&quot;${identifier}&quot;,&quot;facilityName&quot;:&quot;${name}&quot;,&quot;buildingName&quot;:&quot;innoeye&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FloorInformation/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">F_ID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Room" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;Room${FacilityID}&quot;,&quot;area&quot;:&quot;100&quot;,&quot;power&quot;:&quot;100&quot;,&quot;floorInformation&quot;:{&quot;id&quot;:${F_ID},&quot;number&quot;:1},&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;facilityName&quot;:&quot;TestFacilityIDName&quot;,&quot;buildingIdentifier&quot;:&quot;fe377659-fee4-4fd6-8978-615bedb6ee39&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/RoomInformation/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">R_ID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Identifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;buildingIdentifier&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zone Create" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;roomInformation&quot;:{&quot;id&quot;:&quot;${R_ID}&quot;},&quot;horizontal&quot;:4,&quot;vertical&quot;:4,&quot;horzNumType&quot;:&quot;Alphabetical&quot;,&quot;vertNumType&quot;:&quot;Numberical&quot;,&quot;horzStart&quot;:null,&quot;vertStart&quot;:null,&quot;siteType&quot;:&quot;RDC&quot;,&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;buildingIdentifier&quot;:&quot;${Identifier}&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;,&quot;floorName&quot;:&quot;${name}&quot;,&quot;roomName&quot;:&quot;Room 3&quot;,&quot;roomIdentifier&quot;:&quot;87ebf487-85e7-48a5-8791-56d0e05739a4&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/ZoneInformation/update</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateRackTemplate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;rackGroupTemplate&quot;:{&quot;templateName&quot;:&quot;Tname${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;id&quot;:6064,&quot;siteType&quot;:&quot;RDC&quot;},&quot;rackInfoTemplateList&quot;:[{&quot;id&quot;:null,&quot;rackName&quot;:&quot;RackN${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;maxPower&quot;:99999,&quot;maxWeight&quot;:99999999,&quot;width&quot;:19,&quot;topRackWeight&quot;:99999999,&quot;status&quot;:&quot;PLANNED&quot;,&quot;subType&quot;:&quot;Transport Rack&quot;,&quot;startSlotNumber&quot;:1,&quot;endSlotNumber&quot;:99,&quot;unitStartFromTop&quot;:99,&quot;rackType&quot;:&quot;2-post Frame&quot;,&quot;customRack&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/RackTemplate/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">actionListId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.rackInfoTemplateList[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateSlotMaterialTemplate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:5,&quot;endSlotNumber&quot;:7,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:13,&quot;endSlotNumber&quot;:15,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:18,&quot;endSlotNumber&quot;:20,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:24,&quot;endSlotNumber&quot;:26,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:29,&quot;endSlotNumber&quot;:31,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/SlotMaterialTemplate/create?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Connectivity Fetching" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/SlotMaterialTemplate/search?_s=(rackInfoTemplate.rackName==%27RackN${CURRENT_D&amp;T}${FacilityID}%27;rackInfoTemplate.rackGroupTemplate.templateName==%27Tname${CURRENT_D&amp;T}${FacilityID}%27)&amp;orderBy=modifiedTime&amp;orderType=desc&amp;llimit=0&amp;ulimit=400</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">indentifier1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,&quot;mountingType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">indentifier2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,&quot;mountingType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get list of material Port connectivity-A" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/search?_s=(sourceSlotMaterialTemplate.identifier==${indentifier1};portType!=Power);id=ge=0&amp;orderBy=modifiedTime&amp;orderType=desc&amp;ulimit=400&amp;llimit=0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON ExtractorA" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">srcIdA</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]sourceSlotMaterialTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">rackMId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;rackMaterialId&quot;:(.*?),&quot;slotMaterialTemplateId</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">Id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.*destSlotMaterialTemplate.rackInfoTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">destId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]destSlotMaterialTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get list of material Port connectivity-B" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/search?_s=(sourceSlotMaterialTemplate.identifier==${indentifier2};portType!=%20%20Power);id=ge=0&amp;orderBy=modifiedTime&amp;orderType=desc&amp;ulimit=400&amp;llimit=0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON ExtractorB" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">srcId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]sourceSlotMaterialTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Perform Connectivity" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:${actionListId},&quot;nic&quot;:&quot;intel&quot;,&quot;slot&quot;:&quot;OCP&quot;,&quot;slotNumber&quot;:&quot;OCP&quot;,&quot;port&quot;:&quot;0&quot;,&quot;portType&quot;:&quot;SFP28&quot;,&quot;switchPort&quot;:&quot;0&quot;,&quot;speed&quot;:&quot;25G&quot;,&quot;networkType&quot;:&quot;OVS&quot;,&quot;cable&quot;:&quot;y&quot;,&quot;displayName&quot;:&quot;ytr&quot;,&quot;cableLength&quot;:null,&quot;cableStatus&quot;:&quot;PLANNED&quot;,&quot;cableCode&quot;:&quot;CB00493&quot;,&quot;numberOfCoreWireA&quot;:1,&quot;numberOfCoreWireB&quot;:1,&quot;connectorTypeA&quot;:&quot;RJ11&quot;,&quot;connectorTypeB&quot;:&quot;RJ45&quot;,&quot;connectionOfB&quot;:&quot;&quot;,&quot;connectionOfA&quot;:&quot;&quot;,&quot;connectivityStatus&quot;:&quot;CONNECTED&quot;,&quot;destSlotMaterialTemplate&quot;:{&quot;id&quot;:${srcIdA}},&quot;sourceSlotMaterialTemplate&quot;:{&quot;id&quot;:${srcId}},&quot;rackMaterialId&quot;:${rackMId}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/update?equipmentType=EQUIPMENT</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="R-FACILITIES_API&apos;S-AddonAPI&apos;S" enabled="true">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${RCP_TOCKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">audience</stringProp>
                <stringProp name="Header.value">apim</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Facility Lisitng &amp; Filter" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Facility Listing" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility data" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/search?_s=id%3Dge%3D0&amp;orderBy=id&amp;orderType=desc&amp;llimit=0&amp;ulimit=24</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1077976085">&quot;name&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FacilityName</stringProp>
                  <stringProp name="RegexExtractor.regex">null,&quot;name&quot;:&quot;(.*?)&quot;,&quot;status</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/searchRecordsCount?_s=id%3Dge%3D0&amp;$llimit&amp;$ulimit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1077976085">&quot;name&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Facility Filter By name" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility search" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/search?_s=name%3D%3D%27*${FacilityName}*%27&amp;orderBy=id&amp;orderType=desc&amp;llimit=0&amp;ulimit=24</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1077976085">&quot;name&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility searchRecordsCount" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apim/facility/rest/Facility/searchRecordsCount?_s=name%3D%3D%27*Facilityautomation*%27&amp;$llimit&amp;$ulimit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1077976085">&quot;name&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Facility E2E Flow" enabled="true"/>
          <hashTree>
            <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="TC-Create Facility Details" enabled="true">
              <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
            </CriticalSectionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Facility Details" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;facility&quot;:{&quot;referenceId&quot;:&quot;TRSS${__threadNum}${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;name&quot;:&quot;TestFacilityIDName&quot;,&quot;siteNameLocalized&quot;:&quot;small&quot;,&quot;subType&quot;:&quot;small&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;entityType&quot;:{&quot;id&quot;:1087,&quot;type&quot;:&quot;RDC&quot;},&quot;status&quot;:&quot;In Design&quot;,&quot;address&quot;:&quot; Fuji-Hakone-Izu National Park&quot;,&quot;latitude&quot;:35.3606,&quot;longitude&quot;:138.7274,&quot;buildingName&quot;:&quot;innoeye&quot;,&quot;entityGeographyL1&quot;:{&quot;id&quot;:48,&quot;name&quot;:&quot;TOKAI&quot;},&quot;entityGeographyL2&quot;:{&quot;id&quot;:2143,&quot;name&quot;:&quot;SHIZUOKA&quot;,&quot;geographyL1&quot;:{&quot;name&quot;:&quot;TOKAI&quot;}},&quot;entityGeographyL3&quot;:{&quot;id&quot;:172,&quot;name&quot;:&quot;FUJINOMIYA-SHI&quot;},&quot;phase&quot;:&quot;Phase 1&quot;,&quot;provider&quot;:&quot;pxuzuzyinl&quot;,&quot;locationId&quot;:&quot;L3673&quot;,&quot;superBlockNumber&quot;:&quot;3&quot;,&quot;sarfId&quot;:&quot;Default&quot;,&quot;siteCategory&quot;:&quot;Default&quot;,&quot;classification&quot;:&quot;Facility&quot;,&quot;siteCode&quot;:&quot;TR${__threadNum}${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;fiveGAantennaType&quot;:&quot;NA&quot;,&quot;searchRadiusRing&quot;:0,&quot;clutterType&quot;:&quot;DU&quot;,&quot;siteNumber&quot;:null},&quot;identifierList&quot;:[],&quot;facilityBuildingList&quot;:[{&quot;name&quot;:&quot;Building Name&quot;,&quot;selected&quot;:true}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FacilityIntegration/createFacilityDetail</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1523852302">&quot;status&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">TestFacilityID</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Building Identifier" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FacilityBuilding/search?_s=referenceId==%27${TestFacilityID}%27;siteType%3D%3D%27RDC%27&amp;orderBy=modifiedTime&amp;orderType=desc&amp;llimit=0&amp;ulimit=100</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identifier Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">identifier</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="name Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">name</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Floor" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;name&quot;:&quot;Floor${FacilityID}&quot;,&quot;number&quot;:1,&quot;siteRefId&quot;:&quot;${TestFacilityID}&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;buildingIdentifier&quot;:&quot;${identifier}&quot;,&quot;facilityName&quot;:&quot;${name}&quot;,&quot;buildingName&quot;:&quot;innoeye&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FloorInformation/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">F_ID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Room" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;name&quot;:&quot;Room${FacilityID}&quot;,&quot;area&quot;:&quot;100&quot;,&quot;power&quot;:&quot;100&quot;,&quot;floorInformation&quot;:{&quot;id&quot;:${F_ID},&quot;number&quot;:1},&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;facilityName&quot;:&quot;TestFacilityIDName&quot;,&quot;buildingIdentifier&quot;:&quot;fe377659-fee4-4fd6-8978-615bedb6ee39&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/RoomInformation/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">R_ID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Identifier</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;buildingIdentifier&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zone Create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;roomInformation&quot;:{&quot;id&quot;:&quot;${R_ID}&quot;},&quot;horizontal&quot;:4,&quot;vertical&quot;:4,&quot;horzNumType&quot;:&quot;Alphabetical&quot;,&quot;vertNumType&quot;:&quot;Numberical&quot;,&quot;horzStart&quot;:null,&quot;vertStart&quot;:null,&quot;siteType&quot;:&quot;RDC&quot;,&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;buildingIdentifier&quot;:&quot;${Identifier}&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;,&quot;floorName&quot;:&quot;${name}&quot;,&quot;roomName&quot;:&quot;Room 3&quot;,&quot;roomIdentifier&quot;:&quot;87ebf487-85e7-48a5-8791-56d0e05739a4&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/ZoneInformation/update</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1077976085">&quot;name&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateRackTemplate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;rackGroupTemplate&quot;:{&quot;templateName&quot;:&quot;Tname${__threadNum}${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;id&quot;:6064,&quot;siteType&quot;:&quot;RDC&quot;},&quot;rackInfoTemplateList&quot;:[{&quot;id&quot;:null,&quot;rackName&quot;:&quot;RackN${__threadNum}${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;maxPower&quot;:99999,&quot;maxWeight&quot;:99999999,&quot;width&quot;:19,&quot;topRackWeight&quot;:99999999,&quot;status&quot;:&quot;PLANNED&quot;,&quot;subType&quot;:&quot;Transport Rack&quot;,&quot;startSlotNumber&quot;:1,&quot;endSlotNumber&quot;:99,&quot;unitStartFromTop&quot;:99,&quot;rackType&quot;:&quot;2-post Frame&quot;,&quot;customRack&quot;:null}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/RackTemplate/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">actionListId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.rackInfoTemplateList[*].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateSlotMaterialTemplate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:5,&quot;endSlotNumber&quot;:7,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:13,&quot;endSlotNumber&quot;:15,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:18,&quot;endSlotNumber&quot;:20,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:24,&quot;endSlotNumber&quot;:26,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:29,&quot;endSlotNumber&quot;:31,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/SlotMaterialTemplate/create?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Connectivity Fetching" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/SlotMaterialTemplate/search?_s=(rackInfoTemplate.rackName==%27RackN${__threadNum}${CURRENT_D&amp;T}${FacilityID}%27;rackInfoTemplate.rackGroupTemplate.templateName==%27Tname${__threadNum}${CURRENT_D&amp;T}${FacilityID}%27)&amp;orderBy=modifiedTime&amp;orderType=desc&amp;llimit=0&amp;ulimit=400</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">indentifier1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,&quot;mountingType&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">indentifier2</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,&quot;mountingType&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">2</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get list of material Port connectivity-A" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/search?_s=(sourceSlotMaterialTemplate.identifier==${indentifier1};portType!=Power);id=ge=0&amp;orderBy=modifiedTime&amp;orderType=desc&amp;ulimit=400&amp;llimit=0</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON ExtractorA" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">srcIdA</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]sourceSlotMaterialTemplate.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">rackMId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;rackMaterialId&quot;:(.*?),&quot;slotMaterialTemplateId</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">Id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.*destSlotMaterialTemplate.rackInfoTemplate.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">destId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]destSlotMaterialTemplate.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get list of material Port connectivity-B" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/search?_s=(sourceSlotMaterialTemplate.identifier==${indentifier2};portType!=%20%20Power);id=ge=0&amp;orderBy=modifiedTime&amp;orderType=desc&amp;ulimit=400&amp;llimit=0</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON ExtractorB" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">srcId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]sourceSlotMaterialTemplate.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Perform Connectivity" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;id&quot;:${actionListId},&quot;nic&quot;:&quot;intel&quot;,&quot;slot&quot;:&quot;OCP&quot;,&quot;slotNumber&quot;:&quot;OCP&quot;,&quot;port&quot;:&quot;0&quot;,&quot;portType&quot;:&quot;SFP28&quot;,&quot;switchPort&quot;:&quot;0&quot;,&quot;speed&quot;:&quot;25G&quot;,&quot;networkType&quot;:&quot;OVS&quot;,&quot;cable&quot;:&quot;y&quot;,&quot;displayName&quot;:&quot;ytr&quot;,&quot;cableLength&quot;:null,&quot;cableStatus&quot;:&quot;PLANNED&quot;,&quot;cableCode&quot;:&quot;CB00493&quot;,&quot;numberOfCoreWireA&quot;:1,&quot;numberOfCoreWireB&quot;:1,&quot;connectorTypeA&quot;:&quot;RJ11&quot;,&quot;connectorTypeB&quot;:&quot;RJ45&quot;,&quot;connectionOfB&quot;:&quot;&quot;,&quot;connectionOfA&quot;:&quot;&quot;,&quot;connectivityStatus&quot;:&quot;CONNECTED&quot;,&quot;destSlotMaterialTemplate&quot;:{&quot;id&quot;:${srcIdA}},&quot;sourceSlotMaterialTemplate&quot;:{&quot;id&quot;:${srcId}},&quot;rackMaterialId&quot;:${rackMId}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/update?equipmentType=EQUIPMENT</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="T-FACILITIES_API&apos;S" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${RCP_TOCKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">audience</stringProp>
                <stringProp name="Header.value">apim</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="TC-Create Facility Details" enabled="true">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Facility Details" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;facility&quot;:{&quot;referenceId&quot;:&quot;TestR${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;name&quot;:&quot;TestFacilityIDName&quot;,&quot;siteNameLocalized&quot;:&quot;small&quot;,&quot;subType&quot;:&quot;small&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;entityType&quot;:{&quot;id&quot;:1087,&quot;type&quot;:&quot;RDC&quot;},&quot;status&quot;:&quot;In Design&quot;,&quot;address&quot;:&quot; Fuji-Hakone-Izu National Park&quot;,&quot;latitude&quot;:35.3606,&quot;longitude&quot;:138.7274,&quot;buildingName&quot;:&quot;innoeye&quot;,&quot;entityGeographyL1&quot;:{&quot;id&quot;:48,&quot;name&quot;:&quot;TOKAI&quot;},&quot;entityGeographyL2&quot;:{&quot;id&quot;:2143,&quot;name&quot;:&quot;SHIZUOKA&quot;,&quot;geographyL1&quot;:{&quot;name&quot;:&quot;TOKAI&quot;}},&quot;entityGeographyL3&quot;:{&quot;id&quot;:172,&quot;name&quot;:&quot;FUJINOMIYA-SHI&quot;},&quot;phase&quot;:&quot;Phase 1&quot;,&quot;provider&quot;:&quot;pxuzuzyinl&quot;,&quot;locationId&quot;:&quot;L3673&quot;,&quot;superBlockNumber&quot;:&quot;3&quot;,&quot;sarfId&quot;:&quot;Default&quot;,&quot;siteCategory&quot;:&quot;Default&quot;,&quot;classification&quot;:&quot;Facility&quot;,&quot;siteCode&quot;:&quot;R${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;fiveGAantennaType&quot;:&quot;NA&quot;,&quot;searchRadiusRing&quot;:0,&quot;clutterType&quot;:&quot;DU&quot;,&quot;siteNumber&quot;:null},&quot;identifierList&quot;:[],&quot;facilityBuildingList&quot;:[{&quot;name&quot;:&quot;Building Name&quot;,&quot;selected&quot;:true}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FacilityIntegration/createFacilityDetail</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1523852302">&quot;status&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">TestFacilityID</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Building Identifier" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FacilityBuilding/search?_s=referenceId==%27${TestFacilityID}%27;siteType%3D%3D%27RDC%27&amp;orderBy=modifiedTime&amp;orderType=desc&amp;llimit=0&amp;ulimit=100</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identifier Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="name Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">name</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Floor" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;Floor${FacilityID}&quot;,&quot;number&quot;:1,&quot;siteRefId&quot;:&quot;${TestFacilityID}&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;buildingIdentifier&quot;:&quot;${identifier}&quot;,&quot;facilityName&quot;:&quot;${name}&quot;,&quot;buildingName&quot;:&quot;innoeye&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/FloorInformation/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">F_ID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Room" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;Room${FacilityID}&quot;,&quot;area&quot;:&quot;100&quot;,&quot;power&quot;:&quot;100&quot;,&quot;floorInformation&quot;:{&quot;id&quot;:${F_ID},&quot;number&quot;:1},&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;facilityName&quot;:&quot;TestFacilityIDName&quot;,&quot;buildingIdentifier&quot;:&quot;fe377659-fee4-4fd6-8978-615bedb6ee39&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/RoomInformation/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">R_ID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Identifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;buildingIdentifier&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zone Create" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;roomInformation&quot;:{&quot;id&quot;:&quot;${R_ID}&quot;},&quot;horizontal&quot;:4,&quot;vertical&quot;:4,&quot;horzNumType&quot;:&quot;Alphabetical&quot;,&quot;vertNumType&quot;:&quot;Numberical&quot;,&quot;horzStart&quot;:null,&quot;vertStart&quot;:null,&quot;siteType&quot;:&quot;RDC&quot;,&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;buildingIdentifier&quot;:&quot;${Identifier}&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;,&quot;floorName&quot;:&quot;${name}&quot;,&quot;roomName&quot;:&quot;Room 3&quot;,&quot;roomIdentifier&quot;:&quot;87ebf487-85e7-48a5-8791-56d0e05739a4&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/${FM-Version}/rest/ZoneInformation/update</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateRackTemplate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;rackGroupTemplate&quot;:{&quot;templateName&quot;:&quot;Tname${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;id&quot;:6064,&quot;siteType&quot;:&quot;RDC&quot;},&quot;rackInfoTemplateList&quot;:[{&quot;id&quot;:null,&quot;rackName&quot;:&quot;RackN${CURRENT_D&amp;T}${FacilityID}&quot;,&quot;maxPower&quot;:99999,&quot;maxWeight&quot;:99999999,&quot;width&quot;:19,&quot;topRackWeight&quot;:99999999,&quot;status&quot;:&quot;PLANNED&quot;,&quot;subType&quot;:&quot;Transport Rack&quot;,&quot;startSlotNumber&quot;:1,&quot;endSlotNumber&quot;:99,&quot;unitStartFromTop&quot;:99,&quot;rackType&quot;:&quot;2-post Frame&quot;,&quot;customRack&quot;:null}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/RackTemplate/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">actionListId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.rackInfoTemplateList[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateSlotMaterialTemplate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:5,&quot;endSlotNumber&quot;:7,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:13,&quot;endSlotNumber&quot;:15,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:18,&quot;endSlotNumber&quot;:20,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:24,&quot;endSlotNumber&quot;:26,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}},{&quot;materialCode&quot;:&quot;NQCD2001&quot;,&quot;startSlotNumber&quot;:29,&quot;endSlotNumber&quot;:31,&quot;materialName&quot;:&quot;D52BQ-2U SKU#2(CDC SKU2)&quot;,&quot;autoCommissioning&quot;:&quot;NO_TEXT&quot;,&quot;id&quot;:null,&quot;rackSide&quot;:&quot;FRONT&quot;,&quot;voltage&quot;:100,&quot;current&quot;:5.52,&quot;weight&quot;:35,&quot;deviceRole&quot;:&quot;Web Server&quot;,&quot;powerSource&quot;:null,&quot;fuse&quot;:null,&quot;redundancy&quot;:null,&quot;pduUnit&quot;:null,&quot;mountingType&quot;:&quot;slot&quot;,&quot;alignment&quot;:null,&quot;slotPosition&quot;:null,&quot;type&quot;:&quot;Server&quot;,&quot;vendorName&quot;:&quot;QUANTA CLOUD TECHNOLOGY JAPAN_JP&quot;,&quot;cost&quot;:12737,&quot;slotSequence&quot;:null,&quot;slots&quot;:3,&quot;identifier&quot;:null,&quot;rackInfoTemplate&quot;:{&quot;id&quot;:${actionListId}}}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/SlotMaterialTemplate/create?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Connectivity Fetching" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/SlotMaterialTemplate/search?_s=(rackInfoTemplate.rackName==%27RackN${CURRENT_D&amp;T}${FacilityID}%27;rackInfoTemplate.rackGroupTemplate.templateName==%27Tname${CURRENT_D&amp;T}${FacilityID}%27)&amp;orderBy=modifiedTime&amp;orderType=desc&amp;llimit=0&amp;ulimit=400</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">indentifier1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,&quot;mountingType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">indentifier2</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,&quot;mountingType&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get list of material Port connectivity-A" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/search?_s=(sourceSlotMaterialTemplate.identifier==${indentifier1};portType!=Power);id=ge=0&amp;orderBy=modifiedTime&amp;orderType=desc&amp;ulimit=400&amp;llimit=0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON ExtractorA" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">srcIdA</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]sourceSlotMaterialTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">rackMId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;rackMaterialId&quot;:(.*?),&quot;slotMaterialTemplateId</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">Id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.*destSlotMaterialTemplate.rackInfoTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">destId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]destSlotMaterialTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get list of material Port connectivity-B" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/search?_s=(sourceSlotMaterialTemplate.identifier==${indentifier2};portType!=%20%20Power);id=ge=0&amp;orderBy=modifiedTime&amp;orderType=desc&amp;ulimit=400&amp;llimit=0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON ExtractorB" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">srcId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[*]sourceSlotMaterialTemplate.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">2</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Perform Connectivity" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:${actionListId},&quot;nic&quot;:&quot;intel&quot;,&quot;slot&quot;:&quot;OCP&quot;,&quot;slotNumber&quot;:&quot;OCP&quot;,&quot;port&quot;:&quot;0&quot;,&quot;portType&quot;:&quot;SFP28&quot;,&quot;switchPort&quot;:&quot;0&quot;,&quot;speed&quot;:&quot;25G&quot;,&quot;networkType&quot;:&quot;OVS&quot;,&quot;cable&quot;:&quot;y&quot;,&quot;displayName&quot;:&quot;ytr&quot;,&quot;cableLength&quot;:null,&quot;cableStatus&quot;:&quot;PLANNED&quot;,&quot;cableCode&quot;:&quot;CB00493&quot;,&quot;numberOfCoreWireA&quot;:1,&quot;numberOfCoreWireB&quot;:1,&quot;connectorTypeA&quot;:&quot;RJ11&quot;,&quot;connectorTypeB&quot;:&quot;RJ45&quot;,&quot;connectionOfB&quot;:&quot;&quot;,&quot;connectionOfA&quot;:&quot;&quot;,&quot;connectivityStatus&quot;:&quot;CONNECTED&quot;,&quot;destSlotMaterialTemplate&quot;:{&quot;id&quot;:${srcIdA}},&quot;sourceSlotMaterialTemplate&quot;:{&quot;id&quot;:${srcId}},&quot;rackMaterialId&quot;:${rackMId}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/3.0.0/rest/ConnectivityMappingTemplate/update?equipmentType=EQUIPMENT</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="R-FACILITIES_API&apos;S" enabled="false">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${RCP_TOCKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">audience</stringProp>
                <stringProp name="Header.value">apim</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">714</stringProp>
            <stringProp name="CounterConfig.end">999</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">FacilityID</stringProp>
            <stringProp name="CounterConfig.format">000</stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Facility Details" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;facility&quot;:{&quot;referenceId&quot;:&quot;Test2${FacilityID}&quot;,&quot;name&quot;:&quot;TestFacilityIDName&quot;,&quot;siteNameLocalized&quot;:&quot;small&quot;,&quot;subType&quot;:&quot;small&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;entityType&quot;:{&quot;id&quot;:1087,&quot;type&quot;:&quot;RDC&quot;},&quot;status&quot;:&quot;In Design&quot;,&quot;address&quot;:&quot; Fuji-Hakone-Izu National Park&quot;,&quot;latitude&quot;:35.3606,&quot;longitude&quot;:138.7274,&quot;buildingName&quot;:&quot;innoeye&quot;,&quot;entityGeographyL1&quot;:{&quot;id&quot;:48,&quot;name&quot;:&quot;TOKAI&quot;},&quot;entityGeographyL2&quot;:{&quot;id&quot;:2143,&quot;name&quot;:&quot;SHIZUOKA&quot;,&quot;geographyL1&quot;:{&quot;name&quot;:&quot;TOKAI&quot;}},&quot;entityGeographyL3&quot;:{&quot;id&quot;:172,&quot;name&quot;:&quot;FUJINOMIYA-SHI&quot;},&quot;phase&quot;:&quot;Phase 1&quot;,&quot;provider&quot;:&quot;pxuzuzyinl&quot;,&quot;locationId&quot;:&quot;L3673&quot;,&quot;superBlockNumber&quot;:&quot;3&quot;,&quot;sarfId&quot;:&quot;Default&quot;,&quot;siteCategory&quot;:&quot;Default&quot;,&quot;classification&quot;:&quot;Facility&quot;,&quot;siteCode&quot;:&quot;${FacilityID}&quot;,&quot;fiveGAantennaType&quot;:&quot;NA&quot;,&quot;searchRadiusRing&quot;:0,&quot;clutterType&quot;:&quot;DU&quot;,&quot;siteNumber&quot;:null},&quot;identifierList&quot;:[],&quot;facilityBuildingList&quot;:[{&quot;name&quot;:&quot;Building Name&quot;,&quot;selected&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/2.7.0/rest/FacilityIntegration/createFacilityDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1523852302">&quot;status&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TestFacilityID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Building Identifier" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/2.7.0/rest/FacilityBuilding/search?_s=referenceId==%27${TestFacilityID}%27;siteType%3D%3D%27RDC%27&amp;orderBy=modifiedTime&amp;orderType=desc&amp;llimit=0&amp;ulimit=100</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="identifier Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">identifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;identifier&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="name Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">name</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;(.*?)&quot;,&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Floor" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;${name}&quot;,&quot;number&quot;:1,&quot;siteRefId&quot;:&quot;${TestFacilityID}&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;buildingIdentifier&quot;:&quot;${identifier}&quot;,&quot;facilityName&quot;:&quot;${name}&quot;,&quot;buildingName&quot;:&quot;innoeye&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/2.7.0/rest/FloorInformation/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">F_ID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Room" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;${name}&quot;,&quot;area&quot;:&quot;100&quot;,&quot;power&quot;:&quot;100&quot;,&quot;floorInformation&quot;:{&quot;id&quot;:${F_ID},&quot;number&quot;:1},&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;siteType&quot;:&quot;RDC&quot;,&quot;facilityName&quot;:&quot;TestFacilityIDName&quot;,&quot;buildingIdentifier&quot;:&quot;fe377659-fee4-4fd6-8978-615bedb6ee39&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/2.7.0/rest/RoomInformation/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">R_ID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.*?),&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Identifier</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;buildingIdentifier&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zone Create" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;roomInformation&quot;:{&quot;id&quot;:&quot;${R_ID}&quot;},&quot;horizontal&quot;:4,&quot;vertical&quot;:4,&quot;horzNumType&quot;:&quot;Alphabetical&quot;,&quot;vertNumType&quot;:&quot;Numberical&quot;,&quot;horzStart&quot;:null,&quot;vertStart&quot;:null,&quot;siteType&quot;:&quot;RDC&quot;,&quot;siteRefId&quot;:&quot;TestFacilityID&quot;,&quot;buildingIdentifier&quot;:&quot;${Identifier}&quot;,&quot;buildingName&quot;:&quot;Building 4&quot;,&quot;floorName&quot;:&quot;${name}&quot;,&quot;roomName&quot;:&quot;Room 3&quot;,&quot;roomIdentifier&quot;:&quot;87ebf487-85e7-48a5-8791-56d0e05739a4&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BaseURL}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apim/fcm/2.7.0/rest/ZoneInformation/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1077976085">&quot;name&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
